# -*- coding: utf-8 -*-
"""
reporting/formatter.py
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (Markdown) –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º PD-–º–æ–¥–µ–ª–∏.
"""

from typing import Dict, Any, List
from infra.logger import get_logger
from infra.error_handler import safe_run


class ReportFormatter:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ Markdown:
    - —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –±–ª–æ–∫–∏
    - –≥–æ—Ç–æ–≤–∏—Ç –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –≤ PDF
    """

    def __init__(self):
        self.logger = get_logger()

    @safe_run(stage="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞", retries=2, base_delay=1.0)
    def format_report(self, results: Dict[str, Any]) -> str:
        md = []

        # ---------- –í–≤–µ–¥–µ–Ω–∏–µ ----------
        deal_params = results.get("deal", {}).get("deal_params", {})
        md.append("# üìä –û—Ç—á—ë—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–¥–µ–ª–∫–∏\n")
        md.append("## –í–≤–µ–¥–µ–Ω–∏–µ\n")
        md.append(f"- **–ü—Ä–µ–¥–º–µ—Ç –ª–∏–∑–∏–Ω–≥–∞**: {deal_params.get('lease_subject', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        md.append(f"- **–°—Ä–æ–∫**: {deal_params.get('term_months', '‚Äî')} –º–µ—Å.")
        md.append(f"- **–ê–≤–∞–Ω—Å**: {deal_params.get('advance_payment', '‚Äî')} —Ä—É–±.\n")

        # ---------- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã ----------
        fin = results.get("financials", {}).get("coeffs", {})
        md.append("## üíµ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã\n")
        for k, v in fin.items():
            md.append(f"- {k}: {v:.2f}" if v is not None else f"- {k}: ‚Äî")

        # ---------- –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å ----------
        bal = results.get("balance", {})
        md.append("\n## üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å\n")
        for k, v in {**bal.get("liquidity", {}), **bal.get("stability", {})}.items():
            md.append(f"- {k}: {v:.2f}" if v is not None else f"- {k}: ‚Äî")

        # ---------- –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ ----------
        cash = results.get("cashflow", {})
        md.append("\n## üîÑ –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ (51 —Å—á—ë—Ç)\n")
        metrics = cash.get("metrics", {})
        for k, v in metrics.items():
            if isinstance(v, dict):
                continue
            md.append(f"- {k}: {v:.2f}" if v is not None else f"- {k}: ‚Äî")

        # ---------- –î–µ–±–∏—Ç–æ—Ä–∫–∞ ----------
        recv = results.get("receivables", {})
        md.append("\n## üì• –î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å (–û–°–í 62)\n")
        for k, v in recv.get("metrics", {}).items():
            md.append(f"- {k}: {v:.2f}" if v is not None else f"- {k}: ‚Äî")

        # ---------- –ö—Ä–µ–¥–∏—Ç–æ—Ä–∫–∞ ----------
        pay = results.get("payables", {})
        md.append("\n## üì§ –ö—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å (–û–°–í 60)\n")
        for k, v in pay.get("metrics", {}).items():
            md.append(f"- {k}: {v:.2f}" if v is not None else f"- {k}: ‚Äî")

        # ---------- –°–¥–µ–ª–∫–∞ ----------
        deal = results.get("deal", {})
        md.append("\n## üìë –°–¥–µ–ª–∫–∞ (–ö–ü)\n")
        for k, v in deal.get("payment_analysis", {}).items():
            md.append(f"- {k}: {v}" if v is not None else f"- {k}: ‚Äî")

        # ---------- –†–µ—Ç—Ä–æ-—Å–∏–º—É–ª—è—Ü–∏—è ----------
        retro = results.get("retro", {}).get("metrics", {})
        md.append("\n## ‚è≥ –†–µ—Ç—Ä–æ-—Å–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n")
        for k, v in retro.items():
            md.append(f"- {k}: {v}" if v is not None else f"- {k}: ‚Äî")

        # ---------- –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥ ----------
        score = results.get("scoring", {})
        md.append("\n## üßÆ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥ PD\n")
        md.append(f"- **Total Score**: {score.get('total_score', '‚Äî')} / {score.get('max_score', '‚Äî')}")
        md.append(f"- **PD (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞)**: {score.get('PD', '‚Äî'):.1%}" if score.get("PD") is not None else "- PD: ‚Äî")
        md.append(f"- **–ö–ª–∞—Å—Å —Ä–∏—Å–∫–∞**: {score.get('risk_class', '‚Äî')}\n")

        # ---------- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ ----------
        md.append("## üìâ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n")
        md.append("–ú–æ–¥–µ–ª—å –≤—ã—è–≤–∏–ª–∞ –∫–ª—é—á–µ–≤—ã–µ —Ä–∏—Å–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–º. –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.\n")

        return "\n".join(md)
